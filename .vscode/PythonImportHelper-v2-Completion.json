[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "ProtocolTypeRouter",
        "importPath": "channels.routing",
        "description": "channels.routing",
        "isExtraImport": true,
        "detail": "channels.routing",
        "documentation": {}
    },
    {
        "label": "URLRouter",
        "importPath": "channels.routing",
        "description": "channels.routing",
        "isExtraImport": true,
        "detail": "channels.routing",
        "documentation": {}
    },
    {
        "label": "AuthMiddlewareStack",
        "importPath": "channels.auth",
        "description": "channels.auth",
        "isExtraImport": true,
        "detail": "channels.auth",
        "documentation": {}
    },
    {
        "label": "lobhunter.routing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "lobhunter.routing",
        "description": "lobhunter.routing",
        "detail": "lobhunter.routing",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "api",
        "importPath": "lobhunter.api",
        "description": "lobhunter.api",
        "isExtraImport": true,
        "detail": "lobhunter.api",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "google.auth.transport.requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "google.auth.transport.requests",
        "description": "google.auth.transport.requests",
        "detail": "google.auth.transport.requests",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "google.auth.transport.requests",
        "description": "google.auth.transport.requests",
        "isExtraImport": true,
        "detail": "google.auth.transport.requests",
        "documentation": {}
    },
    {
        "label": "NinjaAPI",
        "importPath": "ninja",
        "description": "ninja",
        "isExtraImport": true,
        "detail": "ninja",
        "documentation": {}
    },
    {
        "label": "ModelSchema",
        "importPath": "ninja",
        "description": "ninja",
        "isExtraImport": true,
        "detail": "ninja",
        "documentation": {}
    },
    {
        "label": "Schema",
        "importPath": "ninja",
        "description": "ninja",
        "isExtraImport": true,
        "detail": "ninja",
        "documentation": {}
    },
    {
        "label": "BlockList",
        "importPath": "lobhunter.schemas",
        "description": "lobhunter.schemas",
        "isExtraImport": true,
        "detail": "lobhunter.schemas",
        "documentation": {}
    },
    {
        "label": "OrderPayloadSchema",
        "importPath": "lobhunter.schemas",
        "description": "lobhunter.schemas",
        "isExtraImport": true,
        "detail": "lobhunter.schemas",
        "documentation": {}
    },
    {
        "label": "OrderResponse",
        "importPath": "lobhunter.schemas",
        "description": "lobhunter.schemas",
        "isExtraImport": true,
        "detail": "lobhunter.schemas",
        "documentation": {}
    },
    {
        "label": "OrderSchema",
        "importPath": "lobhunter.schemas",
        "description": "lobhunter.schemas",
        "isExtraImport": true,
        "detail": "lobhunter.schemas",
        "documentation": {}
    },
    {
        "label": "StatusPayloadSchema",
        "importPath": "lobhunter.schemas",
        "description": "lobhunter.schemas",
        "isExtraImport": true,
        "detail": "lobhunter.schemas",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "AsyncWebsocketConsumer",
        "importPath": "channels.generic.websocket",
        "description": "channels.generic.websocket",
        "isExtraImport": true,
        "detail": "channels.generic.websocket",
        "documentation": {}
    },
    {
        "label": "kitchen_ticket_number",
        "importPath": "lobhunter.parser",
        "description": "lobhunter.parser",
        "isExtraImport": true,
        "detail": "lobhunter.parser",
        "documentation": {}
    },
    {
        "label": "database_sync_to_async",
        "importPath": "channels.db",
        "description": "channels.db",
        "isExtraImport": true,
        "detail": "channels.db",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "Credentials",
        "importPath": "google.oauth2.credentials",
        "description": "google.oauth2.credentials",
        "isExtraImport": true,
        "detail": "google.oauth2.credentials",
        "documentation": {}
    },
    {
        "label": "InstalledAppFlow",
        "importPath": "google_auth_oauthlib.flow",
        "description": "google_auth_oauthlib.flow",
        "isExtraImport": true,
        "detail": "google_auth_oauthlib.flow",
        "documentation": {}
    },
    {
        "label": "build",
        "importPath": "googleapiclient.discovery",
        "description": "googleapiclient.discovery",
        "isExtraImport": true,
        "detail": "googleapiclient.discovery",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "pytz",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytz",
        "description": "pytz",
        "detail": "pytz",
        "documentation": {}
    },
    {
        "label": "Order",
        "importPath": "lobhunter.models",
        "description": "lobhunter.models",
        "isExtraImport": true,
        "detail": "lobhunter.models",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stringify",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "backend.core.asgi",
        "description": "backend.core.asgi",
        "peekOfCode": "application = ProtocolTypeRouter(\n    {\n        \"http\": get_asgi_application(),\n        \"websocket\": AuthMiddlewareStack(\n            URLRouter(lobhunter.routing.websocket_urlpatterns)\n        ),\n    }\n)",
        "detail": "backend.core.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "backend.core.settings",
        "description": "backend.core.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = \"django-insecure-x4!=%k$15fz&1pjc=3izn=y$@#ke!^91+s5g6^$x8&sz+olqkt\"\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = [\"localhost\", \"10.1.10.38\"]\n# Application definition\nINSTALLED_APPS = [",
        "detail": "backend.core.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "backend.core.settings",
        "description": "backend.core.settings",
        "peekOfCode": "SECRET_KEY = \"django-insecure-x4!=%k$15fz&1pjc=3izn=y$@#ke!^91+s5g6^$x8&sz+olqkt\"\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = [\"localhost\", \"10.1.10.38\"]\n# Application definition\nINSTALLED_APPS = [\n    \"channels\",\n    \"daphne\",\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",",
        "detail": "backend.core.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "backend.core.settings",
        "description": "backend.core.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = [\"localhost\", \"10.1.10.38\"]\n# Application definition\nINSTALLED_APPS = [\n    \"channels\",\n    \"daphne\",\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",",
        "detail": "backend.core.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "backend.core.settings",
        "description": "backend.core.settings",
        "peekOfCode": "ALLOWED_HOSTS = [\"localhost\", \"10.1.10.38\"]\n# Application definition\nINSTALLED_APPS = [\n    \"channels\",\n    \"daphne\",\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",",
        "detail": "backend.core.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "backend.core.settings",
        "description": "backend.core.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    \"channels\",\n    \"daphne\",\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"lobhunter\",",
        "detail": "backend.core.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "backend.core.settings",
        "description": "backend.core.settings",
        "peekOfCode": "MIDDLEWARE = [\n    \"corsheaders.middleware.CorsMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",",
        "detail": "backend.core.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "backend.core.settings",
        "description": "backend.core.settings",
        "peekOfCode": "ROOT_URLCONF = \"core.urls\"\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [BASE_DIR / \"templates\"],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",",
        "detail": "backend.core.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "backend.core.settings",
        "description": "backend.core.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [BASE_DIR / \"templates\"],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",",
        "detail": "backend.core.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "backend.core.settings",
        "description": "backend.core.settings",
        "peekOfCode": "WSGI_APPLICATION = \"core.wsgi.application\"\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\n# DATABASES = {\n#     \"default\": {\n#         \"ENGINE\": \"django.db.backends.sqlite3\",\n#         \"NAME\": BASE_DIR / \"db.sqlite3\",\n#     }\n# }\nDATABASES = {",
        "detail": "backend.core.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "backend.core.settings",
        "description": "backend.core.settings",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql_psycopg2\",\n        \"NAME\": \"prod_db\",\n        \"USER\": \"aaryan\",\n        \"PASSWORD\": \"Testing@123\",\n        \"HOST\": \"db\",\n        \"PORT\": \"5432\",\n    }\n}",
        "detail": "backend.core.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "backend.core.settings",
        "description": "backend.core.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",\n    },",
        "detail": "backend.core.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "backend.core.settings",
        "description": "backend.core.settings",
        "peekOfCode": "LANGUAGE_CODE = \"en-us\"\nTIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "backend.core.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "backend.core.settings",
        "description": "backend.core.settings",
        "peekOfCode": "TIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nCORS_ALLOWED_ORIGINS = [\"http://localhost:3000\", \"http://10.1.10.107:3000\"]",
        "detail": "backend.core.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "backend.core.settings",
        "description": "backend.core.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nCORS_ALLOWED_ORIGINS = [\"http://localhost:3000\", \"http://10.1.10.107:3000\"]\n# TODO : Remove this line in production",
        "detail": "backend.core.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "backend.core.settings",
        "description": "backend.core.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nCORS_ALLOWED_ORIGINS = [\"http://localhost:3000\", \"http://10.1.10.107:3000\"]\n# TODO : Remove this line in production\nCORS_ALLOW_HEADERS = [",
        "detail": "backend.core.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "backend.core.settings",
        "description": "backend.core.settings",
        "peekOfCode": "STATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nCORS_ALLOWED_ORIGINS = [\"http://localhost:3000\", \"http://10.1.10.107:3000\"]\n# TODO : Remove this line in production\nCORS_ALLOW_HEADERS = [\n    \"content-type\",\n]\nASGI_APPLICATION = \"core.asgi.application\"",
        "detail": "backend.core.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "backend.core.settings",
        "description": "backend.core.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nCORS_ALLOWED_ORIGINS = [\"http://localhost:3000\", \"http://10.1.10.107:3000\"]\n# TODO : Remove this line in production\nCORS_ALLOW_HEADERS = [\n    \"content-type\",\n]\nASGI_APPLICATION = \"core.asgi.application\"\nCHANNEL_LAYERS = {\n    \"default\": {\n        \"BACKEND\": \"channels_redis.core.RedisChannelLayer\",",
        "detail": "backend.core.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOWED_ORIGINS",
        "kind": 5,
        "importPath": "backend.core.settings",
        "description": "backend.core.settings",
        "peekOfCode": "CORS_ALLOWED_ORIGINS = [\"http://localhost:3000\", \"http://10.1.10.107:3000\"]\n# TODO : Remove this line in production\nCORS_ALLOW_HEADERS = [\n    \"content-type\",\n]\nASGI_APPLICATION = \"core.asgi.application\"\nCHANNEL_LAYERS = {\n    \"default\": {\n        \"BACKEND\": \"channels_redis.core.RedisChannelLayer\",\n        \"CONFIG\": {",
        "detail": "backend.core.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_HEADERS",
        "kind": 5,
        "importPath": "backend.core.settings",
        "description": "backend.core.settings",
        "peekOfCode": "CORS_ALLOW_HEADERS = [\n    \"content-type\",\n]\nASGI_APPLICATION = \"core.asgi.application\"\nCHANNEL_LAYERS = {\n    \"default\": {\n        \"BACKEND\": \"channels_redis.core.RedisChannelLayer\",\n        \"CONFIG\": {\n            \"hosts\": [(\"127.0.0.1\", 6379)],\n        },",
        "detail": "backend.core.settings",
        "documentation": {}
    },
    {
        "label": "ASGI_APPLICATION",
        "kind": 5,
        "importPath": "backend.core.settings",
        "description": "backend.core.settings",
        "peekOfCode": "ASGI_APPLICATION = \"core.asgi.application\"\nCHANNEL_LAYERS = {\n    \"default\": {\n        \"BACKEND\": \"channels_redis.core.RedisChannelLayer\",\n        \"CONFIG\": {\n            \"hosts\": [(\"127.0.0.1\", 6379)],\n        },\n    },\n}",
        "detail": "backend.core.settings",
        "documentation": {}
    },
    {
        "label": "CHANNEL_LAYERS",
        "kind": 5,
        "importPath": "backend.core.settings",
        "description": "backend.core.settings",
        "peekOfCode": "CHANNEL_LAYERS = {\n    \"default\": {\n        \"BACKEND\": \"channels_redis.core.RedisChannelLayer\",\n        \"CONFIG\": {\n            \"hosts\": [(\"127.0.0.1\", 6379)],\n        },\n    },\n}",
        "detail": "backend.core.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "backend.core.urls",
        "description": "backend.core.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    path(\"api/\", api.urls),\n]",
        "detail": "backend.core.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "backend.core.wsgi",
        "description": "backend.core.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "backend.core.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.lobhunter.migrations.0001_initial",
        "description": "backend.lobhunter.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='AddressBlockList',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('address', models.CharField(max_length=30)),",
        "detail": "backend.lobhunter.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.lobhunter.migrations.0002_operationdate_order_kitchen_number",
        "description": "backend.lobhunter.migrations.0002_operationdate_order_kitchen_number",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('lobhunter', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='OperationDate',\n            fields=[\n                ('id', models.AutoField(primary_key=True, serialize=False)),\n                ('date', models.DateTimeField()),",
        "detail": "backend.lobhunter.migrations.0002_operationdate_order_kitchen_number",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.lobhunter.migrations.0003_operationdate_counter",
        "description": "backend.lobhunter.migrations.0003_operationdate_counter",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('lobhunter', '0002_operationdate_order_kitchen_number'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='operationdate',\n            name='counter',\n            field=models.IntegerField(default=1600),\n            preserve_default=False,",
        "detail": "backend.lobhunter.migrations.0003_operationdate_counter",
        "documentation": {}
    },
    {
        "label": "sync_up",
        "kind": 2,
        "importPath": "backend.lobhunter.api",
        "description": "backend.lobhunter.api",
        "peekOfCode": "def sync_up(request):\n    print(\"Starting Syncronization\")\n    all_messages = fetcher()\n    print(f\"Adding{len(all_messages)} to the database\")\n    # print(\"The messages received are \" ,all_messages[0][\"email_id\"])\n    blocked = 0\n    if len(all_messages) > 0:\n        for entry in all_messages:\n            order = parser(entry[\"data\"])\n            print(\"\\n\\nThe order numer is \", order[\"order_number\"])",
        "detail": "backend.lobhunter.api",
        "documentation": {}
    },
    {
        "label": "orders",
        "kind": 2,
        "importPath": "backend.lobhunter.api",
        "description": "backend.lobhunter.api",
        "peekOfCode": "def orders(request):\n    return list(Order.objects.all().values())\n@api.get(\"/order/detail/{order_id}\")\ndef order(request, order_id: int):\n    order_data = Order.objects.filter(order_number=order_id).values()[0]\n    return order_data\n@api.get(\"/order/date/{date}\", response=OrderResponse)\ndef order_on_date(request, date: str):\n    print(date)\n    order_data = Order.objects.filter(date=date).values(",
        "detail": "backend.lobhunter.api",
        "documentation": {}
    },
    {
        "label": "order",
        "kind": 2,
        "importPath": "backend.lobhunter.api",
        "description": "backend.lobhunter.api",
        "peekOfCode": "def order(request, order_id: int):\n    order_data = Order.objects.filter(order_number=order_id).values()[0]\n    return order_data\n@api.get(\"/order/date/{date}\", response=OrderResponse)\ndef order_on_date(request, date: str):\n    print(date)\n    order_data = Order.objects.filter(date=date).values(\n        \"order_number\", \"total\", \"customer_name\"\n    )\n    payload = [",
        "detail": "backend.lobhunter.api",
        "documentation": {}
    },
    {
        "label": "order_on_date",
        "kind": 2,
        "importPath": "backend.lobhunter.api",
        "description": "backend.lobhunter.api",
        "peekOfCode": "def order_on_date(request, date: str):\n    print(date)\n    order_data = Order.objects.filter(date=date).values(\n        \"order_number\", \"total\", \"customer_name\"\n    )\n    payload = [\n        OrderPayloadSchema(\n            order_number=order[\"order_number\"],\n            total=order[\"total\"],\n            customer_name=order[\"customer_name\"],",
        "detail": "backend.lobhunter.api",
        "documentation": {}
    },
    {
        "label": "all_blocks",
        "kind": 2,
        "importPath": "backend.lobhunter.api",
        "description": "backend.lobhunter.api",
        "peekOfCode": "def all_blocks(request):\n    phones = [str(i.phone) for i in PhoneBlockList.objects.all()]\n    address = [str(i.address) for i in AddressBlockList.objects.all()]\n    blocks = phones + address\n    print(blocks)\n    return blocks\n@api.post(\"/blocklist/add\")\ndef add_to_blocklist(request, data: BlockList):\n    print(data)\n    print(data.address)",
        "detail": "backend.lobhunter.api",
        "documentation": {}
    },
    {
        "label": "add_to_blocklist",
        "kind": 2,
        "importPath": "backend.lobhunter.api",
        "description": "backend.lobhunter.api",
        "peekOfCode": "def add_to_blocklist(request, data: BlockList):\n    print(data)\n    print(data.address)\n    print(data.phone)\n    message = \"\"\n    if len(data.phone) > 1:\n        PhoneBlockList.objects.create(data.phone)\n        message += \"1 phone number was blocked \\n\"\n    if len(data.address) > 1:\n        AddressBlockList.objects.create(address=data.address.upper())",
        "detail": "backend.lobhunter.api",
        "documentation": {}
    },
    {
        "label": "change_status",
        "kind": 2,
        "importPath": "backend.lobhunter.api",
        "description": "backend.lobhunter.api",
        "peekOfCode": "def change_status(request, payload: StatusPayloadSchema):\n    chosen = Order.objects.get(pk=payload.order_number)\n    chosen.status = payload.status\n    chosen.save()\n    return {\"message\": \"Status was changed\"}",
        "detail": "backend.lobhunter.api",
        "documentation": {}
    },
    {
        "label": "api",
        "kind": 5,
        "importPath": "backend.lobhunter.api",
        "description": "backend.lobhunter.api",
        "peekOfCode": "api = NinjaAPI()\n@api.get(\"/sync\")\ndef sync_up(request):\n    print(\"Starting Syncronization\")\n    all_messages = fetcher()\n    print(f\"Adding{len(all_messages)} to the database\")\n    # print(\"The messages received are \" ,all_messages[0][\"email_id\"])\n    blocked = 0\n    if len(all_messages) > 0:\n        for entry in all_messages:",
        "detail": "backend.lobhunter.api",
        "documentation": {}
    },
    {
        "label": "LobhunterConfig",
        "kind": 6,
        "importPath": "backend.lobhunter.apps",
        "description": "backend.lobhunter.apps",
        "peekOfCode": "class LobhunterConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'lobhunter'",
        "detail": "backend.lobhunter.apps",
        "documentation": {}
    },
    {
        "label": "OrderConsumer",
        "kind": 6,
        "importPath": "backend.lobhunter.consumer",
        "description": "backend.lobhunter.consumer",
        "peekOfCode": "class OrderConsumer(AsyncWebsocketConsumer):\n    async def connect(self):\n        self.group_name = \"kitchen_group\"\n        print(\"\\n\\n\", self.channel_name, \" is connected\")\n        await self.channel_layer.group_add(self.group_name, self.channel_name)\n        await self.accept()\n    async def disconnect(self, close_code):\n        await self.channel_layer.group_discard(self.group_name, self.channel_name)\n    async def receive(self, text_data):\n        data = json.loads(text_data)",
        "detail": "backend.lobhunter.consumer",
        "documentation": {}
    },
    {
        "label": "authenticate_gmail",
        "kind": 2,
        "importPath": "backend.lobhunter.fetch",
        "description": "backend.lobhunter.fetch",
        "peekOfCode": "def authenticate_gmail():\n    creds = None\n    # Load credentials from file if available\n    if os.path.exists(\"token.json\"):\n        creds = Credentials.from_authorized_user_file(\"token.json\", SCOPES)\n    # If credentials are invalid, re-authenticate\n    if not creds or not creds.valid:\n        if creds and creds.expired and creds.refresh_token:\n            creds.refresh(Request())\n        else:",
        "detail": "backend.lobhunter.fetch",
        "documentation": {}
    },
    {
        "label": "fetcher",
        "kind": 2,
        "importPath": "backend.lobhunter.fetch",
        "description": "backend.lobhunter.fetch",
        "peekOfCode": "def fetcher():\n    creds = authenticate_gmail()\n    service = build(\"gmail\", \"v1\", credentials=creds)\n    result = service.users().messages().list(userId=\"me\", labelIds=[\"INBOX\"]).execute()\n    messages = result.get(\"messages\")\n    all_messages = []\n    if not messages:\n        return all_messages\n    for idx, msg in enumerate(messages):\n        txt = service.users().messages().get(userId=\"me\", id=msg[\"id\"]).execute()",
        "detail": "backend.lobhunter.fetch",
        "documentation": {}
    },
    {
        "label": "SCOPES",
        "kind": 5,
        "importPath": "backend.lobhunter.fetch",
        "description": "backend.lobhunter.fetch",
        "peekOfCode": "SCOPES = [\"https://mail.google.com/\"]\ndef authenticate_gmail():\n    creds = None\n    # Load credentials from file if available\n    if os.path.exists(\"token.json\"):\n        creds = Credentials.from_authorized_user_file(\"token.json\", SCOPES)\n    # If credentials are invalid, re-authenticate\n    if not creds or not creds.valid:\n        if creds and creds.expired and creds.refresh_token:\n            creds.refresh(Request())",
        "detail": "backend.lobhunter.fetch",
        "documentation": {}
    },
    {
        "label": "Order",
        "kind": 6,
        "importPath": "backend.lobhunter.models",
        "description": "backend.lobhunter.models",
        "peekOfCode": "class Order(models.Model):\n    email_id = models.CharField(max_length=20)\n    kitchen_number = models.IntegerField()\n    order_number = models.IntegerField(primary_key=True)\n    customer_name = models.CharField(max_length=255)\n    date = models.DateField()\n    phone = models.IntegerField()\n    total = models.DecimalField(max_digits=10, decimal_places=2)\n    payment = models.CharField(max_length=5)\n    ticket = models.CharField(max_length=10000)",
        "detail": "backend.lobhunter.models",
        "documentation": {}
    },
    {
        "label": "OperationDate",
        "kind": 6,
        "importPath": "backend.lobhunter.models",
        "description": "backend.lobhunter.models",
        "peekOfCode": "class OperationDate(models.Model):\n    id = models.AutoField(primary_key=True)\n    date = models.DateTimeField()\n    counter = models.IntegerField()\n    # @property\n    # def now_date_and_time(self):\n    #     now_utc = datetime.now(pytz.utc)\n    #     eastern = pytz.timezone(\"US/Eastern\")\n    #     now_est = now_utc.astimezone(eastern)\n    #     return now_est.strftime(\"%Y-%m-%d %H:%M:%S\")",
        "detail": "backend.lobhunter.models",
        "documentation": {}
    },
    {
        "label": "PhoneBlockList",
        "kind": 6,
        "importPath": "backend.lobhunter.models",
        "description": "backend.lobhunter.models",
        "peekOfCode": "class PhoneBlockList(models.Model):\n    phone = models.IntegerField()\n    reason = models.CharField(max_length=1000, default=\"\", blank=True)\nclass AddressBlockList(models.Model):\n    address = models.CharField(max_length=30)\n    reason = models.CharField(max_length=1000, default=\"\", blank=True)",
        "detail": "backend.lobhunter.models",
        "documentation": {}
    },
    {
        "label": "AddressBlockList",
        "kind": 6,
        "importPath": "backend.lobhunter.models",
        "description": "backend.lobhunter.models",
        "peekOfCode": "class AddressBlockList(models.Model):\n    address = models.CharField(max_length=30)\n    reason = models.CharField(max_length=1000, default=\"\", blank=True)",
        "detail": "backend.lobhunter.models",
        "documentation": {}
    },
    {
        "label": "operational_start",
        "kind": 2,
        "importPath": "backend.lobhunter.parser",
        "description": "backend.lobhunter.parser",
        "peekOfCode": "def operational_start():\n    today = datetime.now(pytz.utc).astimezone(pytz.timezone(\"US/Eastern\"))\n    print(\"today day\", today.strftime(\"%A\"))    \n    minute = 0\n    if today.strftime(\"%A\") == \"Sunday\":\n        minute = 30\n    today_open = datetime(today.year, today.month, today.day, hour=10, minute=minute)\n    print(\"Today open\", today_open)\n    today_open = today_open.astimezone(pytz.timezone(\"US/Eastern\"))\n    print(\"Today open after timezone aware\", today_open)",
        "detail": "backend.lobhunter.parser",
        "documentation": {}
    },
    {
        "label": "kitchen_ticket_number",
        "kind": 2,
        "importPath": "backend.lobhunter.parser",
        "description": "backend.lobhunter.parser",
        "peekOfCode": "def kitchen_ticket_number():\n    if not OperationDate.objects.first():\n        OperationDate.objects.create(date=operational_start(), counter=1600)\n    # the last date saved\n    prev_op_date = OperationDate.objects.first()\n    prev_date = prev_op_date.date\n    # timezone aware now\n    now_utc = datetime.now(pytz.utc)\n    eastern = pytz.timezone(\"US/Eastern\")\n    now_date = now_utc.astimezone(eastern)",
        "detail": "backend.lobhunter.parser",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 2,
        "importPath": "backend.lobhunter.parser",
        "description": "backend.lobhunter.parser",
        "peekOfCode": "def parser(html_content):\n    soup = BeautifulSoup(html_content, \"html.parser\")\n    def safe_find_and_split(search_text, split_delimiter):\n        \"\"\"Find text safely and split it; return None if not found.\"\"\"\n        result = soup.find(text=lambda t: t and search_text in t)\n        return result.split(split_delimiter)[-1].strip() if result else None\n    total_element = soup.find(text=\"Order Total:\")\n    order_total = total_element.find_next(\"b\").text.strip() if total_element else None\n    order_total = float(order_total.replace(\"$\", \"\")) if order_total else None\n    # Extract and format the date",
        "detail": "backend.lobhunter.parser",
        "documentation": {}
    },
    {
        "label": "diff",
        "kind": 5,
        "importPath": "backend.lobhunter.parser",
        "description": "backend.lobhunter.parser",
        "peekOfCode": "diff = {\n    \"sunday\": 13.5,\n    \"monday\": 15,\n    \"tuesday\": 15,\n    \"wednesday\": 15,\n    \"thursday\": 15,\n    \"friday\": 16,\n    \"saturday\": 16,\n}\ndef operational_start():",
        "detail": "backend.lobhunter.parser",
        "documentation": {}
    },
    {
        "label": "websocket_urlpatterns",
        "kind": 5,
        "importPath": "backend.lobhunter.routing",
        "description": "backend.lobhunter.routing",
        "peekOfCode": "websocket_urlpatterns = [\n    path(\"ws/orders/\", OrderConsumer.as_asgi()),\n]",
        "detail": "backend.lobhunter.routing",
        "documentation": {}
    },
    {
        "label": "OrderSchema",
        "kind": 6,
        "importPath": "backend.lobhunter.schemas",
        "description": "backend.lobhunter.schemas",
        "peekOfCode": "class OrderSchema(ModelSchema):\n    class Meta:\n        model = Order\n        fields = \"__all__\"\nclass OrderPayloadSchema(Schema):\n    order_number: int\n    total: float\n    customer_name: str\nclass OrderResponse(Schema):\n    success: bool",
        "detail": "backend.lobhunter.schemas",
        "documentation": {}
    },
    {
        "label": "OrderPayloadSchema",
        "kind": 6,
        "importPath": "backend.lobhunter.schemas",
        "description": "backend.lobhunter.schemas",
        "peekOfCode": "class OrderPayloadSchema(Schema):\n    order_number: int\n    total: float\n    customer_name: str\nclass OrderResponse(Schema):\n    success: bool\n    message: str\n    payload: List[OrderPayloadSchema]\nclass BlockList(Schema):\n    address: str",
        "detail": "backend.lobhunter.schemas",
        "documentation": {}
    },
    {
        "label": "OrderResponse",
        "kind": 6,
        "importPath": "backend.lobhunter.schemas",
        "description": "backend.lobhunter.schemas",
        "peekOfCode": "class OrderResponse(Schema):\n    success: bool\n    message: str\n    payload: List[OrderPayloadSchema]\nclass BlockList(Schema):\n    address: str\n    phone: str\nclass StatusPayloadSchema(Schema):\n    order_number: str\n    status: str",
        "detail": "backend.lobhunter.schemas",
        "documentation": {}
    },
    {
        "label": "BlockList",
        "kind": 6,
        "importPath": "backend.lobhunter.schemas",
        "description": "backend.lobhunter.schemas",
        "peekOfCode": "class BlockList(Schema):\n    address: str\n    phone: str\nclass StatusPayloadSchema(Schema):\n    order_number: str\n    status: str",
        "detail": "backend.lobhunter.schemas",
        "documentation": {}
    },
    {
        "label": "StatusPayloadSchema",
        "kind": 6,
        "importPath": "backend.lobhunter.schemas",
        "description": "backend.lobhunter.schemas",
        "peekOfCode": "class StatusPayloadSchema(Schema):\n    order_number: str\n    status: str",
        "detail": "backend.lobhunter.schemas",
        "documentation": {}
    },
    {
        "label": "OrderModelTest",
        "kind": 6,
        "importPath": "backend.lobhunter.tests",
        "description": "backend.lobhunter.tests",
        "peekOfCode": "class OrderModelTest(TestCase):\n    def setUp(self):\n        # Setting up initial test data\n        self.order_data = {\n            \"email_id\": \"aha7h92h972\",\n            \"order_number\": 1,\n            \"customer_name\": \"John Doe\",\n            \"date\": \"2024-12-08\",\n            \"phone\": 1234567890,\n            \"total\": \"100.50\",",
        "detail": "backend.lobhunter.tests",
        "documentation": {}
    },
    {
        "label": "NinjaAPITestCase",
        "kind": 6,
        "importPath": "backend.lobhunter.tests",
        "description": "backend.lobhunter.tests",
        "peekOfCode": "class NinjaAPITestCase(TestCase):\n    def setUp(self):\n        self.client = Client()\n        self.order_data = {\n            \"email_id\": \"test@example.com\",\n            \"order_number\": 1,\n            \"customer_name\": \"John Doe\",\n            \"date\": \"2024-12-08\",\n            \"phone\": 1234567890,\n            \"total\": 100.50,",
        "detail": "backend.lobhunter.tests",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "backend.manage",
        "description": "backend.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "backend.manage",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "def stringify(value):\n    return _stringify(value, separators=(',', ':'))\nassert stringify([None, None]) == '[[null,null]]'\na = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "a = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['o']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "b = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['one']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['two']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['three']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['a']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['test']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['array']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a2",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "a2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o2",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "str = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "oo",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "oo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    }
]